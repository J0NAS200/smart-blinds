#include <Arduino.h>
#include <Stepper.h> // Library for motor control
#include <Matter.h> // Adjust for Arduino-compatible Matter SDK library
#include <EEPROM.h> // Library for saving persistent data
#include <em_sleep.h> // Silicon Labs energy management for deep sleep

// Motor configuration
#define STEPS_PER_REV 200 // NEMA 17 typical steps per revolution
#define DIR_PIN 2         // Direction pin for DRV8825
#define STEP_PIN 3        // Step pin for DRV8825
Stepper motor(STEPS_PER_REV, DIR_PIN, STEP_PIN);

// Configuration parameters
int maxSteps = 0; // Max steps for the blind range (calibrated)
int currentPosition = 0;   // Current position in % (0-100)

// EEPROM addresses
#define EEPROM_MAX_STEPS_ADDR 0
#define EEPROM_CURRENT_POSITION_ADDR sizeof(int)

// Battery monitoring pins
#define VOLTAGE_PIN A0 // Analog pin for voltage divider

// Constants for battery monitoring
const float DIVIDER_RATIO = 4.3; // Adjusted for 33k and 10k resistors
const float MAX_VOLTAGE = 12.6; // Full charge voltage for 3S LiPo
const float MIN_VOLTAGE = 9.0;  // Safe discharge limit
const int LOW_BATTERY_THRESHOLD = 20; // Percentage threshold for low battery warning
const int CRITICAL_BATTERY_THRESHOLD = 15; // Critical battery level to exit sleep mode
const unsigned long SLEEP_TIMEOUT = 300000; // 5 minutes in milliseconds
const unsigned long BATTERY_CHECK_INTERVAL = 3600000; // 1 hour in milliseconds
const unsigned long NORMAL_MODE_BATTERY_CHECK_INTERVAL = 60000; // 1 minute in milliseconds
const float BATTERY_DEBOUNCE_THRESHOLD = 0.2; // Voltage difference threshold for debouncing

bool isCalibrating = false; // Calibration mode flag
bool isSleeping = false;    // Sleep mode flag
unsigned long lastActivityTime = 0; // Tracks last user activity
unsigned long lastBatteryCheckTime = 0; // Tracks the last battery check
bool rtcWakeUpFlag = false; // Set by the RTC interrupt handler
float lastBatteryVoltage = MAX_VOLTAGE; // Tracks last measured battery voltage

void setup() {
    // Initialize motor pins
    pinMode(DIR_PIN, OUTPUT);
    pinMode(STEP_PIN, OUTPUT);

    // Set initial motor speed
    motor.setSpeed(60); // Speed in RPM

    // Initialize serial communication
    Serial.begin(115200);

    // Initialize Matter protocol
    Matter.begin();

    // Load saved data from EEPROM with error handling
    if (!EEPROM.get(EEPROM_MAX_STEPS_ADDR, maxSteps)) {
        Serial.println("Error reading maxSteps from EEPROM. Defaulting to 0.");
        maxSteps = 0;
    }
    if (!EEPROM.get(EEPROM_CURRENT_POSITION_ADDR, currentPosition)) {
        Serial.println("Error reading currentPosition from EEPROM. Defaulting to 0.");
        currentPosition = 0;
    }

    // Define Matter device type and attributes
    Matter.setDeviceType("WindowCovering");
    Matter.setAttribute("Position", currentPosition);
    Matter.setAttribute("Battery", 100); // Battery percentage
    Matter.setAttribute("Calibration", "Manual"); // Calibration status
    Matter.setAttribute("BatteryWarning", "Normal"); // Battery warning status
    Matter.setAttribute("SleepStatus", "Awake"); // Sleep mode status
    Matter.onCommand("setPosition", handleSetPosition);
    Matter.onCommand("calibration", handleCalibration);
    Matter.onCommand("stepUp", handleStepUp);
    Matter.onCommand("stepDown", handleStepDown);
    Matter.onCommand("enterSleep", prepareForSleep);
    Matter.onCommand("exitSleep", handleExitSleep);

    // Start commissioning process
    Matter.commission();
    lastActivityTime = millis(); // Initialize activity timer
    lastBatteryCheckTime = millis(); // Initialize battery check timer
}

void loop() {
    if (isSleeping) {
        Serial.println("Device is in deep sleep mode.");

        // Enter deep sleep until the next event
        enterDeepSleep();
        return; // Skip further processing while sleeping
    }

    // Check for inactivity and enter sleep mode if needed
    if (millis() - lastActivityTime >= SLEEP_TIMEOUT) {
        prepareForSleep();
        return;
    }

    // Periodically check battery level in normal mode
    if (millis() - lastBatteryCheckTime >= NORMAL_MODE_BATTERY_CHECK_INTERVAL) {
        lastBatteryCheckTime = millis();
        checkBatteryLevel();
    }

    // Continuously process Matter commands
    Matter.process();
}

void enterDeepSleep() {
    // Ensure the Matter stack is configured for low-power operation
    Matter.configureLowPowerMode(); // Configure Matter stack for low-power operation

    // Set the RTC to wake up periodically
    unsigned long wakeUpInterval = BATTERY_CHECK_INTERVAL; // Define wake-up interval
    CMU_ClockEnable(cmuClock_RTC, true);
    RTC_Init_TypeDef rtcInit = RTC_INIT_DEFAULT;
    RTC_Init(&rtcInit);
    RTC_CompareSet(0, wakeUpInterval * (32768 / 1000)); // Configure RTC to wake up
    RTC_IntEnable(RTC_IF_COMP0);
    NVIC_EnableIRQ(RTC_IRQn);

    // Start RTC
    RTC_Enable(true);

    // Enter EM2 Deep Sleep (Matter radio listening enabled)
    EMU_EnterEM2(true);
    Serial.println("Device has entered deep sleep with periodic wake-ups.");
}

extern "C" void RTC_IRQHandler() {
    RTC_IntClear(RTC_IF_COMP0); // Clear interrupt flag
    rtcWakeUpFlag = true; // Signal wake-up
    Serial.println("RTC wake-up triggered.");

    // Perform battery check
    if (checkBatteryLevel()) {
        handleExitSleep(); // Exit sleep if critical battery level is detected
    } else {
        enterDeepSleep(); // Return to deep sleep
    }
}

bool checkBatteryLevel() {
    float batteryVoltage = readBattery();

    // Debouncing logic to avoid false warnings
    if (abs(batteryVoltage - lastBatteryVoltage) < BATTERY_DEBOUNCE_THRESHOLD) {
        batteryVoltage = lastBatteryVoltage; // Ignore minor fluctuations
    } else {
        lastBatteryVoltage = batteryVoltage; // Update last valid reading
    }

    int batteryLevel = (int)((batteryVoltage - MIN_VOLTAGE) / (MAX_VOLTAGE - MIN_VOLTAGE) * 100);
    batteryLevel = constrain(batteryLevel, 0, 100); // Constrain within 0-100

    Serial.print("Battery: ");
    Serial.println(batteryLevel);

    Matter.setAttribute("Battery", batteryLevel); // Update battery percentage

    if (batteryLevel <= CRITICAL_BATTERY_THRESHOLD) {
        Serial.println("Critical battery level detected. Exiting sleep mode.");
        Matter.setAttribute("BatteryWarning", "Critical");
        return true; // Indicates device should exit sleep mode
    } else if (batteryLevel <= LOW_BATTERY_THRESHOLD) {
        Matter.setAttribute("BatteryWarning", "Low");
        Serial.println("Warning: Battery level is low!");
    } else {
        Matter.setAttribute("BatteryWarning", "Normal");
    }

    return false; // Indicates device can remain in sleep mode
}

float readBattery() {
    int rawValue = analogRead(VOLTAGE_PIN); // Read raw ADC value
    if (rawValue < 0 || rawValue > 1023) {
        Serial.println("Error: Battery reading out of range.");
        return lastBatteryVoltage; // Return last valid voltage
    }
    float voltage = (rawValue * 3.3 / 1023.0) * DIVIDER_RATIO; // Scale ADC value to battery voltage
    return voltage;
}

void moveToPosition(int target) {
    if (isCalibrating) {
        Serial.println("Cannot use this function during calibration.");
        return;
    }

    int targetSteps = map(target, 0, 100, 0, maxSteps);
    int currentSteps = map(currentPosition, 0, 100, 0, maxSteps);
    int stepsToMove = targetSteps - currentSteps;

    if (stepsToMove != 0) {
        motor.step(stepsToMove); // Move motor to the target position
        currentPosition = target; // Update current position
        Matter.setAttribute("Position", currentPosition);
        Serial.print("Moved to position: ");
        Serial.println(currentPosition);
    } else {
        Serial.println("Already at the target position.");
    }
}

void handleSetPosition(int percentage) {
    if (isSleeping) {
        handleExitSleep(); // Wake up if in sleep mode
    }

    lastActivityTime = millis(); // Reset activity timer

    // Validate the input percentage
    if (percentage < 0 || percentage > 100) {
        Serial.println("Invalid position command.");
        return;
    }

    // Move to the specified position
    moveToPosition(percentage);
}

void handleStepUp() {
    if (isSleeping) {
        handleExitSleep();
    }

    lastActivityTime = millis(); // Reset activity timer

    if (currentPosition > 0) {
        motor.step(-1); // Step up
        currentPosition = max(currentPosition - 1, 0);
        Matter.setAttribute("Position", currentPosition);
        Serial.println("Manual step up.");
    } else {
        Serial.println("Already fully up.");
    }
}

void handleStepDown() {
    if (isSleeping) {
        handleExitSleep();
    }

    lastActivityTime = millis(); // Reset activity timer

    if (currentPosition < 100) {
        motor.step(1); // Step down
        currentPosition = min(currentPosition + 1, 100);
        Matter.setAttribute("Position", currentPosition);
        Serial.println("Manual step down.");
    } else {
        Serial.println("Already fully down.");
    }
}

void prepareForSleep() {
    EEPROM.put(EEPROM_MAX_STEPS_ADDR, maxSteps); // Save calibration data
    EEPROM.put(EEPROM_CURRENT_POSITION_ADDR, currentPosition); // Save current position
    isSleeping = true;
    Matter.setAttribute("SleepStatus", "Asleep"); // Update sleep status attribute
    Serial.println("Device entered sleep mode.");

    // Optionally, add additional logic to disable motor or peripherals
}

void handleExitSleep() {
    isSleeping = false; // Reset sleeping flag
    Matter.setAttribute("SleepStatus", "Awake");
    Serial.println("Device exited sleep mode.");

    // Optionally, reinitialize components as needed
}
